name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'  # This will trigger the workflow on pushes to all branches.

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -f app.dockerfile -t myapp:${{ github.sha }} .

      - name: Save Docker image to disk
        run: |
          docker save myapp:${{ github.sha }} | gzip > myapp.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp
          path: myapp.tar.gz

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp
          path: .

      - name: Install Trivy
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:0.57.0 image --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed myapp:${{ github.sha }}

      # - name: Install Trivy
      #   run: |
      #     sudo apt-get install wget gnupg
      #     wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
      #     echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
      #     sudo apt-get update
      #     sudo apt-get install trivy

      - name: Load Docker image
        run: |
          gunzip -c myapp.tar.gz | docker load

      - name: Perform Vulnerability Scan
        run: |
          for i in {1..3}; do # Retry up to 3 times
            trivy image --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed myapp:${{ github.sha }} && break || sleep 30
          done

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp
          path: .

      - name: Load Docker image
        run: |
          gunzip -c myapp.tar.gz | docker load

      - name: Run Application Container
        run: |
          docker run --name app_container -d -p 8080:8080 myapp:${{ github.sha }}

      - name: Wait for Application to be Ready
        run: |
          for i in {1..30}; do
            if curl -s "http://localhost:8080" > /dev/null; then
              echo "Application is ready!"
              exit 0
            fi
            echo "Waiting for application to be ready..."
            sleep 2
          done
          echo "Application did not start in time!"
          exit 1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run performance tests
        uses: ./.github/actions/performance-test

      - name: Clean Up
        if: always()
        run: |
          docker stop app_container
          docker rm app_container