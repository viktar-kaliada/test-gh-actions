name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'  # This will trigger the workflow on pushes to all branches.

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -f app.dockerfile -t myapp:${{ github.sha }} .

      - name: Save Docker image to disk
        run: |
          docker save myapp:${{ github.sha }} | gzip > myapp.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp
          path: myapp.tar.gz

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          TRIVY_VERSION=0.57.0 # Set the current Trivy version
          wget -O trivy.tar.gz https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_$(uname -s)_(uname -m).tar.gz
          tar zxvf trivy.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Load Docker image
        run: |
          gunzip -c myapp.tar.gz | docker load

      - name: Perform Vulnerability Scan
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed myapp:${{ github.sha }}

      # - name: Clean Up
      #   if: always()
      #   run: |
      #     docker rmi myapp:${{ github.sha }}

  # performance-test:
  #   name: Performance Test
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Download Docker image artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: myapp
  #         path: .

  #     - name: Load Docker image
  #       run: |
  #         gunzip -c myapp.tar.gz | docker load

  #     - name: Run Application Container
  #       run: |
  #         docker run --name app_container -d -p 8080:8080 myapp:${{ github.sha }}

  #     - name: Wait for Application to be Ready
  #       run: |
  #         for i in {1..30}; do
  #           if curl -s "http://localhost:8080" > /dev/null; then
  #             echo "Application is ready!"
  #             exit 0
  #           fi
  #           echo "Waiting for application to be ready..."
  #           sleep 2
  #         done
  #         echo "Application did not start in time!"
  #         exit 1

  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Run performance tests
  #       uses: ./.github/actions/performance-test

  #     - name: Clean Up
  #       if: always()
  #       run: |
  #         docker stop app_container
  #         docker rm app_container